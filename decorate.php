<?php
/**
 * 装饰器模式 不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能
 * Created by PhpStorm.
 * User: wangyuan
 * Date: 18-2-7
 * Time: 下午4:32
 */

interface Component{
    public function operation();
}

//具体装饰的对象
class ConcreteComponent implements Component{

    private $name;
    public function __construct($name)
    {
        $this->name = $name;
    }

    public function operation()
    {
        // TODO: Implement operation() method.
        echo "装饰了".$this->name;
    }
}

//装饰器的父类
class DecoratorParent implements Component{

    protected $component = null;

    //装饰
    public function decorator(Component $component){
        $this->component = $component;
    }

    public function operation()
    {
        // TODO: Implement operation() method.
        if (!empty($this->component)){
            $this->component->operation();
        }
    }
}


//具体的装饰器
class DecoratorA extends DecoratorParent{

    public function operation()
    {
        echo 'A装饰器';
        parent::operation();
    }
}

class DecoratorB extends DecoratorParent{
    public function operation()
    {
        echo "B装饰器";
        parent::operation(); // TODO: Change the autogenerated stub
    }
}


$person = new ConcreteComponent('test'); //实例化一个装饰对象

$decoratorA = new DecoratorA();
$decoratorB = new DecoratorB();

$decoratorA->decorator($person);
$decoratorB->decorator($person);

$decoratorA->operation();
$decoratorB->operation();